<html>
    <head>
        <title>Administration</title>
        <link rel="stylesheet" href="style.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
    </head>
    <body class="admin-page-body">

        <div id="adminTitleBar" class="admin-title-bar">
            <a id="other-button" onclick="setSelectedTab('other-tab', 'other-button')">Other</a>
            <a id="database-button" onclick="setSelectedTab('database-tab', 'database-button')">Database</a>
            <a id="marketplace-button">Marketplace</a>
            <a href="/">Home Page</a>
            <a href="/logout">Logout</a>
        </div>

        <div id="adminContainer" class="admin-container">

            <div id="other-tab" style="display: none;">
                <div style="display: flex; justify-content: space-evenly;">
                    <a onclick="setPostType('aboutSelect', 'about')" class="submit-button" style="float: left;">Set About</a>
                    <select id="aboutSelect" class="standard-select">
                        <option>Select the about page...</option>
                    </select>
                    <a onclick="setPostType('contactSelect', 'contact')" class="submit-button" style="float: right;">Set Contact</a>
                    <select id="contactSelect" class="standard-select">
                        <option>Select the contact page...</option>
                    </select>
                </div>

                <div style="display: flex; justify-content: space-evenly;">
                    <p id="totalViews" class="standard-label"></p>
                    <p id="userViews" class="standard-label"></p>
                    <p id="activeUsers" class="standard-label"></p>
                </div>

                <div style="text-align: center;">
                    
                    <div style="margin: 1%; width: 98%; height: 36%;">
                        <canvas id="userViewsChart" ></canvas>
                    </div>
                    <div style="margin: 1%; width: 98%; height: 36%;">
                        <canvas id="postViewsChart"></canvas>
                    </div>
                </div>

                <div>
                    <table id="loggingTable" style="margin: 1%; width: 98%;" class="admin-table">
                        <tbody>
                            <tr>
                                <th>Token</th>
                                <th>Type</th>
                                <th><a id="firstVisitHeader" class="admin-table-button">First Visit</a></th>
                                <th><a id="lastVisitHeader" class="admin-table-button">Last Visit</a></th>
                                <th>Delete</th>
                            </tr>
                        </tbody>
                    </table>
                    <a onclick="toggleBotFilter()" class="admin-table-button-create" style="margin-bottom: 2%;">Filter Bots</a>
                </div>
            </div>

            <div id="database-tab" style="display: none;">
                <div style="display: flex; flex-flow: row;">
                    <div class="admin-table-container" style="float: left;">
                        <table id="usersTable" class="admin-table">
                            <tr>
                                <th>Username</th>
                                <th>Admin</th>
                                <th>Change Role</th>
                                <th>Delete</th>
                            </tr>
                        </table>
                        <a onclick="selectHiddenTab('database-tab', 'database-button', 'createuser-tab')" class="admin-table-button-create">Create User</a>
                    </div>

                    <div class="admin-table-container" style="float: right;">
                        <table id="postsTable" class="admin-table">
                            <tr>
                                <th>Title</th>
                                <th>Type</th>
                                <th>Length</th>
                                <th>Visibility</th>
                                <th>Edit</th>
                                <th>Delete</th>
                            </tr>
                        </table>
                        <a onclick="selectHiddenTab('database-tab', 'database-button', 'createpost-tab')" class="admin-table-button-create">Create Post</a>
                    </div>
                </div>
            </div>

            <div id="createpost-tab" class="admin-create-post-container" style="display: none;">
                <form action="/posts/create" method="POST" enctype="multipart/form-data">
                    <input type="text" name="postname" class="standard-input" style="float: left;" placeholder="Enter your post's title.">
                    <input type="file" name="image" class="admin-create-post-upload" style="float: right;">
                    <textarea name="postcontent" class="admin-create-post-textarea" rows="6" cols="60"></textarea>
                    <div style="display: flex; justify-content: space-evenly;">
                        <input type="submit" class="submit-button" value="Save Post">
                        <a class="submit-button" onclick="setSelectedTab('createpost-tab', 'database-button')">Cancel</a>
                    </div>
                </form>
            </div>

            <div id="editpost-tab" class="admin-create-post-container" style="display: none;">
                <form method="POST" enctype="multipart/form-data">
                    <input type="text" name="postname" class="standard-input" style="float: left;" placeholder="Enter your post's title.">
                    <input type="file" name="image" class="admin-create-post-upload" style="float: right;">
                    <textarea name="postcontent" class="admin-create-post-textarea" rows="6" cols="60"></textarea>
                    <div style="display: flex; justify-content: space-evenly;">
                        <input type="submit" class="submit-button" value="Apply Changes">
                        <a class="submit-button" onclick="setSelectedTab('editpost-tab', 'database-button')">Cancel</a>
                    </div>
                </form>
            </div>

            <div id="createuser-tab" style="display: none; margin: 20vh;">
                <div class="create-user-container">
                    <h2 class="login-form-title" style="text-align: center;">Create User</h2>
                    <form action="/users/create" method="POST" style="text-align: center;">
                        <input type="text" name="username" class="standard-input" placeholder="Username"><br>
                        <input type="password" name="password" class="standard-input" placeholder="Password"><br>
                        <label class="standard-label">Admin Permissions: <input type="checkbox" name="isadmin" style="transform: scale(3); margin: 20px;"></label><br>
                        <div>
                            <input type="submit" class="submit-button" value="Create User">
                            <a class="submit-button" onclick="setSelectedTab('createuser-tab', 'database-button')">Cancel</a>
                        </div> 
                    </form>   
                </div>
            </div>

        </div>

        <script>

            function formatChart(canvasid, graphtype, label, labels, data) {
                let totalctx = document.getElementById(canvasid).getContext('2d')
                let totalchart = new Chart(totalctx, {
                    type: graphtype,
                    data: {
                        labels: labels,
                        datasets: [{
                        label: label,
                        data: data,
                        borderColor: 'rgb(46, 95, 230)',
                        borderWidth: 4
                    }]},
                    options: {
                        maintainAspectRatio: false,
                    }
                })

            }

            function toggleBotFilter() {
                let recordstable = document.getElementById('loggingTable')
                for (let i = 1; i < recordstable.children.length; i++) {
                    let recordrow = recordstable.children[i]
                    if (recordrow.children[1].innerText === 'Bot') {
                        if (recordrow.style.display === 'none') {
                            recordrow.style.display = 'table-row'
                        } else {
                            recordrow.style.display = 'none'
                        }
                    }
                }
            }

            function setPostType(selectorid, posttype) {
                let selectorelem = document.getElementById(selectorid)
                let selected = selectorelem.options[selectorelem.selectedIndex].value
                fetch('/posts/set/' + posttype + '/' + selected)
                location.reload()
            }

            function selectHiddenTab(currenttabid, currentbuttonid, othertabid) {
                setSelectedTab(currenttabid, currentbuttonid)
                setTimeout(function () {setSelectedTab(othertabid, currentbuttonid)}, 500)
            }

            function deleteDatabaseEntry(apicall, databaserow) {
                fetch(apicall)
                    .then(res => res.json())
                    .then((data) => {
                        if (data.status == 'success') {
                            databaserow.remove()
                        }
                    })
            }

            function changePostVisibility(postid, typetd) {
                if (typetd.innerText === "private") {
                    fetch('/posts/set/post/' + postid)
                        .then(res => res.json())
                        .then((data) => {
                            if (data.status == 'success') {
                                typetd.innerText = "post"
                            }
                        })
                    
                } else {
                    fetch('/posts/set/private/' + postid)
                        .then(res => res.json())
                        .then((data) => {
                            if (data.status == 'success') {
                                typetd.innerText = "private"
                            }
                        })
                }
            }

            function changeUserRole(username, adminstatuselement) {
                fetch('/users/changerole/' + username)
                    .then(res => res.json())
                    .then((data) => {
                        if (data.status == 'success') {
                            if (adminstatuselement.innerText == 'true') {
                                adminstatuselement.innerText = 'false'
                            } else {
                                adminstatuselement.innerText = 'true'
                            }
                        }
                    })
                
            }

            function formatEditForm(url) {
                fetch(url)
                    .then(res => res.json())
                    .then((data) => {
                        if (data.status == 'success') {

                            selectHiddenTab('database-tab', 'database-button', 'editpost-tab')
                            document.getElementById('adminContainer').style.opacity = 0
                            document.querySelector('#editpost-tab > form').action = '/posts/edit/' + data.post._id
                            document.querySelector('#editpost-tab > form > input.standard-input').value = data.post.name
                            document.querySelector('#editpost-tab > form > textarea').textContent = data.post.content
                            
                        }

                    })
            }     

            function setSelectedTab(tabid, buttonid) {
                let parent = document.getElementById('adminContainer')
                let titlebar = document.getElementById('adminTitleBar')
                let buttonelement = document.getElementById(buttonid)
                let tabelement = document.getElementById(tabid)

                if (parent.style.opacity == 0) {
                    if (buttonelement) {
                        for (let i = 0; i < titlebar.children.length; i++) {
                            titlebar.children[i].classList.add('isDisabled')
                        } buttonelement.classList.remove('isDisabled')
                    }
                    parent.style.opacity = 1
                } else {
                    for (let i = 0; i < titlebar.children.length; i++) {
                        titlebar.children[i].classList.remove('isDisabled')
                    } parent.style.opacity = 0
                }

                for (let i = 0; i < parent.children.length; i++) {
                    parent.children[i].style.display = "none"
                }
                tabelement.style.display = "block"
            }

            function formatStatisticsTable(records, sortfunction) {

                records.sort(sortfunction)

                records.forEach((record) => {
                    let parent = document.getElementById('loggingTable')
                    let row = document.createElement('tr')

                    // For logging token
                    let websitetokentd = document.createElement('td')
                    websitetokentd.innerText = record.token
                    websitetokentd.onclick = function () {
                        if (this.lastChild.style.display === 'none') {
                            this.lastChild.style.display = 'flex'
                        } else {
                            this.lastChild.style.display = 'none'
                        }
                    }
                    row.appendChild(websitetokentd)

                    // For record type
                    let typetd = document.createElement('td')
                    if (record.firstvisit === record.lastvisit) {
                        typetd.innerText = 'Bot'
                    } else {
                        typetd.innerText = 'User'
                    }
                    row.appendChild(typetd)

                    // For first visit to site
                    let firstvisittd = document.createElement('td')
                    firstvisittd.innerText = new Date(record.firstvisit).toLocaleString()
                    row.appendChild(firstvisittd)

                    // For last visit to site
                    let lastvisittd = document.createElement('td')
                    lastvisittd.innerText = new Date(record.lastvisit).toLocaleString()
                    row.appendChild(lastvisittd)

                    let deletebuttontd = document.createElement('td')
                    let deletebutton = document.createElement('a')
                    deletebutton.innerText = 'Delete'
                    deletebutton.onclick = function () {deleteDatabaseEntry('/website/delete/' + record.token, row)}
                    deletebutton.classList.add('admin-table-button')
                    deletebuttontd.appendChild(deletebutton)
                    row.appendChild(deletebuttontd)

                    // For more info dropdown
                    let moreinfodiv = document.createElement('div')
                    moreinfodiv.style.display = 'none'
                    moreinfodiv.classList.add('admin-table-dropdown')
                    websitetokentd.appendChild(moreinfodiv)

                    // For ip address
                    let ipaddress = document.createElement('p')
                    ipaddress.innerText = 'IP Address: ' + record.ip
                    moreinfodiv.appendChild(ipaddress)

                    // For refering link
                    let referer = document.createElement('p')
                    referer.innerText = 'Referer: ' + record.referer
                    moreinfodiv.appendChild(referer)

                    // For viewed paths
                    let paths = document.createElement('p')
                    paths.innerText = 'Viewed Paths: ' + record.paths.toString().replaceAll(',', ', ')
                    moreinfodiv.appendChild(paths)

                    // For user agent
                    let useragent = document.createElement('p')
                    useragent.innerText = 'User Agent: ' + record.useragent
                    moreinfodiv.appendChild(useragent)

                    parent.appendChild(row)
                })
            }

            function loadStatistics() {
                fetch('/website/stats')
                    .then(res => res.json())
                    .then((data) => {
                        if (data.status == 'success') {
                            // For other information
                            document.getElementById('totalViews').innerText = 'Total Views: ' + data.statistics.totalviews
                            document.getElementById('userViews').innerText = 'User Views: ' + data.statistics.userviews
                            document.getElementById('activeUsers').innerText = 'Active Users: ' + data.statistics.activeusers

                            // Total new views in the last 7 days
                            formatChart(
                                'userViewsChart',
                                'line',
                                'Human Views',
                                ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],
                                data.statistics.newvisits
                            )

                            // Views for each post
                            formatChart(
                                'postViewsChart',
                                'bar',
                                'Post Views',
                                data.statistics.posts,
                                data.statistics.postviews
                            )
                        }
                    })
                
                fetch('/website/loadall')
                    .then(res => res.json())
                    .then((data) => {
                        if (data.status == 'success') {
                            document.getElementById('firstVisitHeader').onclick = function () {
                                
                                let loggingtable = document.getElementById('loggingTable')
                                while (1 < loggingtable.children.length) {
                                    loggingtable.removeChild(loggingtable.lastChild)
                                }

                                formatStatisticsTable(
                                    data.records,
                                    function (a, b) {
                                        if (a.firstvisit < b.firstvisit) {
                                            return 1
                                        }
                                        if (a.firstvisit > b.firstvisit) {
                                            return -1
                                        }
                                        return 0
                                    }
                                )
                            }

                            document.getElementById('lastVisitHeader').onclick = function () {
                                
                                let loggingtable = document.getElementById('loggingTable')
                                while (1 < loggingtable.children.length) {
                                    loggingtable.removeChild(loggingtable.lastChild)
                                }

                                formatStatisticsTable(
                                    data.records,
                                    function (a, b) {
                                        if (a.lastvisit < b.lastvisit) {
                                            return 1
                                        }
                                        if (a.lastvisit > b.lastvisit) {
                                            return -1
                                        }
                                        return 0
                                    }
                                )
                            }

                            formatStatisticsTable(data.records)
                        }
                    })
            }

            function fillUserTable() {
                fetch('/users/loadall')
                    .then(res => res.json())
                    .then((data) => {
                        if (data.status == 'success') {
                            data.users.forEach((user) => {
                                let parent = document.getElementById('usersTable')
                                let row = document.createElement('tr')

                                // For Username
                                let usernametd = document.createElement('td')
                                usernametd.innerText = user.username
                                row.appendChild(usernametd)

                                // For Admin Status
                                let isadmintd = document.createElement('td')
                                isadmintd.innerText = user.isadmin
                                row.appendChild(isadmintd)

                                // For Change Role Button
                                let changeroletd = document.createElement('td')
                                let changerole = document.createElement('a')
                                changerole.onclick = function () {changeUserRole(user.username, isadmintd)}
                                changerole.innerText = 'Change Role'
                                changerole.classList.add('admin-table-button')
                                changeroletd.appendChild(changerole)
                                row.appendChild(changeroletd)

                                // For Delete Button
                                let deletebuttontd = document.createElement('td')
                                let deletebutton = document.createElement('a')
                                deletebutton.onclick = function() {deleteDatabaseEntry('/users/delete/' + user.username, row)}
                                deletebutton.innerText = 'Delete'
                                deletebutton.classList.add('admin-table-button')
                                deletebuttontd.appendChild(deletebutton)
                                row.appendChild(deletebuttontd)

                                parent.appendChild(row)
                            })
                        }
                    })
            }

            function fillPostTable() {
                fetch('/posts/loadall')
                    .then(res => res.json())
                    .then((data) => {

                        if (data.status == 'success') {

                            data.posts.forEach((post) => {

                                let parent = document.getElementById('postsTable')
                                let row = document.createElement('tr')

                                // For Title
                                let postnametd = document.createElement('td')
                                let postname = document.createElement('a')
                                postname.innerText = post.name
                                postname.href = '/?post=' + post._id
                                postnametd.appendChild(postname)
                                row.appendChild(postnametd)

                                // For Post Type
                                let typetd = document.createElement('td')
                                typetd.innerText = post.type
                                row.appendChild(typetd)

                                // For Length
                                let lengthtd = document.createElement('td')
                                lengthtd.innerText = post.length
                                row.appendChild(lengthtd)

                                // For publish button
                                let publishtd = document.createElement('td')
                                let publish = document.createElement('a')
                                publish.onclick = function () {changePostVisibility(post._id, typetd)}
                                publish.innerText = 'Change'
                                publish.classList.add('admin-table-button')
                                publishtd.appendChild(publish)
                                row.appendChild(publishtd)

                                // For Edit Button
                                let editbuttontd = document.createElement('td')
                                let editbutton = document.createElement('a')
                                editbutton.onclick = function () {formatEditForm('/posts/load/' + post._id)}
                                editbutton.innerText = 'Edit'
                                editbutton.classList.add('admin-table-button')
                                editbuttontd.appendChild(editbutton)
                                row.appendChild(editbuttontd)

                                // For Delete Button
                                let deletebuttontd = document.createElement('td')
                                let deletebutton = document.createElement('a')
                                deletebutton.onclick = function() {
                                    deleteDatabaseEntry('/posts/delete/' + post._id, row)
                                    document.querySelectorAll('option[value="' + post._id + '"]').forEach(option => option.remove())
                                }
                                deletebutton.innerText = 'Delete'
                                deletebutton.classList.add('admin-table-button')
                                deletebuttontd.appendChild(deletebutton)
                                row.appendChild(deletebuttontd)

                                // Append row to table
                                parent.appendChild(row)

                                // Append options for page
                                let aboutoption = document.createElement('option')
                                aboutoption.value = post._id
                                aboutoption.innerText = post.name
                                document.getElementById('aboutSelect').appendChild(aboutoption)

                                let contactoption = document.createElement('option')
                                contactoption.value = post._id
                                contactoption.innerText = post.name
                                document.getElementById('contactSelect').appendChild(contactoption)
                                
                            })
                        }
                    })
            }

            window.onload = function() {
                fillUserTable()
                fillPostTable()
                Chart.defaults.global.defaultFontColor = "#FFFFFF"
                loadStatistics()
            }

        </script>
    </body>
</html>